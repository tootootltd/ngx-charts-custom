// Robert Penner's easeOutExpo
function easeOutExpo(t, b, c, d) {
    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;
}
/**
 * Counts from a number to the end incrementally.
 */
export function count(countFrom, countTo, countDecimals, countDuration, callback) {
    const startVal = Number(countFrom);
    const endVal = Number(countTo);
    const countDown = startVal > endVal;
    const decimals = Math.max(0, countDecimals);
    const dec = Math.pow(10, decimals);
    const duration = Number(countDuration) * 1000;
    let startTime;
    function runCount(timestamp) {
        let frameVal;
        const progress = timestamp - startTime;
        if (countDown) {
            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);
        }
        else {
            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);
        }
        if (countDown) {
            frameVal = frameVal < endVal ? endVal : frameVal;
        }
        else {
            frameVal = frameVal > endVal ? endVal : frameVal;
        }
        frameVal = Math.round(frameVal * dec) / dec;
        const tick = progress < duration;
        callback({
            value: frameVal,
            progress,
            timestamp,
            finished: !tick
        });
        if (tick) {
            return requestAnimationFrame(val => runCount(val));
        }
    }
    return requestAnimationFrame(timestamp => {
        startTime = timestamp;
        return runCount(timestamp);
    });
}
/**
 * Determine decimals places
 *
 * @export
 */
export function decimalChecker(countTo) {
    const endVal = Number(countTo);
    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {
        return 2;
    }
    return 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdG9tbXlkZWFrcy9uZ3gtY2hhcnRzL3NyYy9saWIvY29tbW9uL2NvdW50L2NvdW50LmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFDOUIsU0FBUyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM3QixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLEtBQUssQ0FBQyxTQUFpQixFQUFFLE9BQWUsRUFBRSxhQUFxQixFQUFFLGFBQXFCLEVBQUUsUUFBYTtJQUNuSCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLE1BQU0sU0FBUyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM5QyxJQUFJLFNBQVMsQ0FBQztJQUVkLFNBQVMsUUFBUSxDQUFDLFNBQWlCO1FBQ2pDLElBQUksUUFBUSxDQUFDO1FBQ2IsTUFBTSxRQUFRLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUV2QyxJQUFJLFNBQVMsRUFBRTtZQUNiLFFBQVEsR0FBRyxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM3RTthQUFNO1lBQ0wsUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sR0FBRyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekU7UUFFRCxJQUFJLFNBQVMsRUFBRTtZQUNiLFFBQVEsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztTQUNsRDthQUFNO1lBQ0wsUUFBUSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQ2xEO1FBRUQsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUU1QyxNQUFNLElBQUksR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ2pDLFFBQVEsQ0FBQztZQUNQLEtBQUssRUFBRSxRQUFRO1lBQ2YsUUFBUTtZQUNSLFNBQVM7WUFDVCxRQUFRLEVBQUUsQ0FBQyxJQUFJO1NBQ2hCLENBQUMsQ0FBQztRQUVILElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQztJQUVELE9BQU8scUJBQXFCLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDdkMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0QixPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFlO0lBQzVDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUvQixJQUFJLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQzlDLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBSb2JlcnQgUGVubmVyJ3MgZWFzZU91dEV4cG9cbmZ1bmN0aW9uIGVhc2VPdXRFeHBvKHQsIGIsIGMsIGQpOiBudW1iZXIge1xuICByZXR1cm4gKGMgKiAoLU1hdGgucG93KDIsICgtMTAgKiB0KSAvIGQpICsgMSkgKiAxMDI0KSAvIDEwMjMgKyBiO1xufVxuXG4vKipcbiAqIENvdW50cyBmcm9tIGEgbnVtYmVyIHRvIHRoZSBlbmQgaW5jcmVtZW50YWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvdW50KGNvdW50RnJvbTogbnVtYmVyLCBjb3VudFRvOiBudW1iZXIsIGNvdW50RGVjaW1hbHM6IG51bWJlciwgY291bnREdXJhdGlvbjogbnVtYmVyLCBjYWxsYmFjazogYW55KSB7XG4gIGNvbnN0IHN0YXJ0VmFsID0gTnVtYmVyKGNvdW50RnJvbSk7XG4gIGNvbnN0IGVuZFZhbCA9IE51bWJlcihjb3VudFRvKTtcbiAgY29uc3QgY291bnREb3duID0gc3RhcnRWYWwgPiBlbmRWYWw7XG4gIGNvbnN0IGRlY2ltYWxzID0gTWF0aC5tYXgoMCwgY291bnREZWNpbWFscyk7XG4gIGNvbnN0IGRlYyA9IE1hdGgucG93KDEwLCBkZWNpbWFscyk7XG4gIGNvbnN0IGR1cmF0aW9uID0gTnVtYmVyKGNvdW50RHVyYXRpb24pICogMTAwMDtcbiAgbGV0IHN0YXJ0VGltZTtcblxuICBmdW5jdGlvbiBydW5Db3VudCh0aW1lc3RhbXA6IG51bWJlcikge1xuICAgIGxldCBmcmFtZVZhbDtcbiAgICBjb25zdCBwcm9ncmVzcyA9IHRpbWVzdGFtcCAtIHN0YXJ0VGltZTtcblxuICAgIGlmIChjb3VudERvd24pIHtcbiAgICAgIGZyYW1lVmFsID0gc3RhcnRWYWwgLSBlYXNlT3V0RXhwbyhwcm9ncmVzcywgMCwgc3RhcnRWYWwgLSBlbmRWYWwsIGR1cmF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJhbWVWYWwgPSBlYXNlT3V0RXhwbyhwcm9ncmVzcywgc3RhcnRWYWwsIGVuZFZhbCAtIHN0YXJ0VmFsLCBkdXJhdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50RG93bikge1xuICAgICAgZnJhbWVWYWwgPSBmcmFtZVZhbCA8IGVuZFZhbCA/IGVuZFZhbCA6IGZyYW1lVmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmFtZVZhbCA9IGZyYW1lVmFsID4gZW5kVmFsID8gZW5kVmFsIDogZnJhbWVWYWw7XG4gICAgfVxuXG4gICAgZnJhbWVWYWwgPSBNYXRoLnJvdW5kKGZyYW1lVmFsICogZGVjKSAvIGRlYztcblxuICAgIGNvbnN0IHRpY2sgPSBwcm9ncmVzcyA8IGR1cmF0aW9uO1xuICAgIGNhbGxiYWNrKHtcbiAgICAgIHZhbHVlOiBmcmFtZVZhbCxcbiAgICAgIHByb2dyZXNzLFxuICAgICAgdGltZXN0YW1wLFxuICAgICAgZmluaXNoZWQ6ICF0aWNrXG4gICAgfSk7XG5cbiAgICBpZiAodGljaykge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZSh2YWwgPT4gcnVuQ291bnQodmFsKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aW1lc3RhbXAgPT4ge1xuICAgIHN0YXJ0VGltZSA9IHRpbWVzdGFtcDtcbiAgICByZXR1cm4gcnVuQ291bnQodGltZXN0YW1wKTtcbiAgfSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGRlY2ltYWxzIHBsYWNlc1xuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY2ltYWxDaGVja2VyKGNvdW50VG86IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IGVuZFZhbCA9IE51bWJlcihjb3VudFRvKTtcblxuICBpZiAoZW5kVmFsICUgMSAhPT0gMCAmJiBNYXRoLmFicyhlbmRWYWwpIDw9IDEwKSB7XG4gICAgcmV0dXJuIDI7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cbiJdfQ==